stty -ixon

path=($HOME/.local/bin $path)
fpath=(${fpath:#/usr/local/share/zsh/site-functions} /usr/local/share/zsh/site-functions)

zstyle ':completion:*:manuals.*' insert-sections false
setopt pushd_minus

if [[ -f ~/.iterm2_shell_integration.zsh ]] ; then
        source ~/.iterm2_shell_integration.zsh
fi

source $HOME/.zshrc.local.alias
function ssh-aws () {
  REGION=$1
  ID=$2
  shift
  shift
  ssh $(aws ec2 describe-instances --region=$REGION --instance-ids=$ID | jq '.Reservations|map(.Instances|map(.PublicDnsName)) | flatten | .[0]' -r) $@
}
if [[ -f /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ]] ; then
        source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
fi

function virtual_env_prompt () {
    REPLY=${CONDA_DEFAULT_ENV+"(${CONDA_DEFAULT_ENV}) "}
}
grml_theme_add_token virtual-env -f virtual_env_prompt
zstyle ':prompt:grml:left:setup' items rc virtual-env change-root user at host path vcs percent

export LESS=-S

function ly-exec () {
  ROOT=$(git rev-parse --show-toplevel)
  $ROOT/bin/stack.sh exec -- $@
}

function ly-build () {
  ROOT=$(git rev-parse --show-toplevel)
  $ROOT/bin/stack.sh build $@
}

function ly-test-build () {
  ROOT=$(git rev-parse --show-toplevel)
  $ROOT/bin/stack.sh test --work-dir=.stack-work-test --no-run-tests $@
}

function ly-test () {
  ROOT=$(git rev-parse --show-toplevel)
  $ROOT/bin/stack.sh test --work-dir=.stack-work-test $@
}

function ly-test-exec () {
  ROOT=$(git rev-parse --show-toplevel)
  $ROOT/bin/stack.sh --work-dir=.stack-work-test exec -- $@
}

function ly-prof-build () {
  ROOT=$(git rev-parse --show-toplevel)
  $ROOT/bin/stack.sh build --profile --work-dir=.stack-work-prof $@
}

function ly-prof-exec () {
  ROOT=$(git rev-parse --show-toplevel)
  $ROOT/bin/stack.sh --work-dir=.stack-work-prof exec -- $@
}

#compdef jira
autoload -U compinit && compinit
autoload -U bashcompinit && bashcompinit

_jira_bash_autocomplete() {
    local cur prev opts base
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    opts=$( ${COMP_WORDS[0]} --completion-bash ${COMP_WORDS[@]:1:$COMP_CWORD} )
    COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
    return 0
}
complete -F _jira_bash_autocomplete jira

export CORRECT_IGNORE_FILE='.*'
